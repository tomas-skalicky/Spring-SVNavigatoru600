package com.svnavigatoru600.service.news;

import java.util.Date;
import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Service;

import com.svnavigatoru600.domain.News;
import com.svnavigatoru600.repository.NewsDao;
import com.svnavigatoru600.repository.news.impl.FindAllOrderedArguments;
import com.svnavigatoru600.repository.news.impl.NewsField;
import com.svnavigatoru600.service.util.OrderType;

/**
 * Provides convenient methods to work with {@link News} objects.
 * 
 * @author <a href="mailto:skalicky.tomas@gmail.com">Tomas Skalicky</a>
 */
@Service
public class NewsService {

    /**
     * The object which provides a persistence.
     */
    private final NewsDao newsDao;

    /**
     * Constructor.
     */
    @Inject
    public NewsService(NewsDao newsDao) {
        this.newsDao = newsDao;
    }

    /**
     * Returns a {@link News} stored in the repository which has the given ID.
     */
    public News findById(int newsId) {
        return this.newsDao.findById(newsId);
    }

    /**
     * Returns all {@link News} stored in the repository arranged according to their
     * {@link News#getCreationTime() creation time} descending.
     */
    public List<News> findAllOrdered() {
        return this.newsDao.findAllOrdered(new FindAllOrderedArguments(NewsField.creationTime,
                OrderType.DESCENDING));
    }

    /**
     * Updates the given {@link News} in the repository. The old version of this news should be already stored
     * there.
     */
    public void update(News news) {
        this.newsDao.update(news);
    }

    /**
     * Updates properties of the given <code>newsToUpdate</code> and persists this {@link News} into the
     * repository. The old version of this news should be already stored there.
     * 
     * @param newsToUpdate
     *            The persisted {@link News}
     * @param newNews
     *            The {@link News} which contains new values of properties of <code>newsToUpdate</code>. These
     *            values are copied to the persisted news.
     */
    public void update(News newsToUpdate, News newNews) {
        newsToUpdate.setTitle(newNews.getTitle());
        newsToUpdate.setText(newNews.getText());
        this.update(newsToUpdate);
    }

    /**
     * Updates corresponding {@link Date} fields of the given {@link News} and stores the news to the
     * repository.
     * 
     * @return The ID of the given {@link News} generated by the repository
     */
    public int save(News news) {
        return this.newsDao.save(news);
    }

    /**
     * Deletes the given {@link News} from the repository.
     */
    public void delete(News news) {
        this.newsDao.delete(news);
    }

    /**
     * Deletes the specified {@link News} from the repository.
     * 
     * @param newsId
     *            The ID of the news
     */
    public void delete(int newsId) {
        News news = this.findById(newsId);
        this.newsDao.delete(news);
    }
}
