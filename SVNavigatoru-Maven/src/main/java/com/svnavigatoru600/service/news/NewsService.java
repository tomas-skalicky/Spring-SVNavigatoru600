package com.svnavigatoru600.service.news;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.svnavigatoru600.domain.News;
import com.svnavigatoru600.repository.NewsDao;
import com.svnavigatoru600.repository.news.impl.FindOrderedArguments;

/**
 * Helps to manipulate with {@link News} objects.
 * 
 * @author <a href="mailto:skalicky.tomas@gmail.com">Tomas Skalicky</a>
 */
@Service
public class NewsService {

    /**
     * The object which provides the persistence.
     */
    private final NewsDao newsDao;

    /**
     * Constructor.
     */
    @Autowired
    public NewsService(NewsDao newsDao) {
        this.newsDao = newsDao;
    }

    /**
     * Returns a {@link News} stored in the repository which has the given ID.
     */
    public News findById(int newsId) {
        return this.newsDao.findById(newsId);
    }

    /**
     * Returns all {@link News} stored in the repository arranged according to their values of the given
     * <code>arguments</code>.
     */
    public List<News> findOrdered(FindOrderedArguments arguments) {
        return this.newsDao.findOrdered(arguments);
    }

    /**
     * Updates the given {@link News news} in the repository. The old version of the news should be already
     * stored there.
     */
    public void update(News news) {
        Date now = new Date();
        news.setLastSaveTime(now);
        this.newsDao.update(news);
    }

    /**
     * Updates corresponding {@link Date} fields of the given {@link News news} and stores the news to the
     * repository.
     * 
     * @return The ID of the given {@link News} generated by a repository
     */
    public int save(News news) {
        Date now = new Date();
        news.setCreationTime(now);
        news.setLastSaveTime(now);

        int newId = this.newsDao.save(news);
        news.setId(newId);
        return newId;
    }

    /**
     * Deletes the given {@link News news} from the repository.
     */
    public void delete(News news) {
        this.newsDao.delete(news);
    }
}
