package com.svnavigatoru600.service.records.otherdocuments;

import java.util.List;

import javax.inject.Inject;

import org.springframework.stereotype.Service;

import com.svnavigatoru600.domain.records.OtherDocumentRecord;
import com.svnavigatoru600.domain.records.OtherDocumentRecordType;
import com.svnavigatoru600.repository.records.OtherDocumentRecordDao;
import com.svnavigatoru600.service.records.AbstractDocumentRecordService;
import com.svnavigatoru600.service.util.OrderType;

/**
 * Provides convenient methods to work with {@link OtherDocumentRecord} objects.
 * 
 * @author <a href="mailto:skalicky.tomas@gmail.com">Tomas Skalicky</a>
 */
@Service
public class OtherDocumentRecordService extends AbstractDocumentRecordService {

    /**
     * The object which provides a persistence.
     */
    private final OtherDocumentRecordDao otherDocumentDao;

    /**
     * Constructor.
     */
    @Inject
    public OtherDocumentRecordService(OtherDocumentRecordDao otherDocumentDao) {
        this.otherDocumentDao = otherDocumentDao;
    }

    @Override
    public OtherDocumentRecord findById(int documentId) {
        return this.otherDocumentDao.findById(documentId);
    }

    @Override
    public OtherDocumentRecord findById(int documentId, boolean loadFile) {
        return this.otherDocumentDao.findById(documentId, loadFile);
    }

    @Override
    public OtherDocumentRecord findByFileName(String fileName) {
        return this.otherDocumentDao.findByFileName(fileName);
    }

    /**
     * Returns all {@link OtherDocumentRecord OtherDocumentRecords} stored in the repository arranged
     * according to their {@link OtherDocumentRecord#getCreationTime() creationTimes} in the given
     * {@link OrderType order}.
     */
    public List<OtherDocumentRecord> findAllOrdered(OrderType order) {
        return this.otherDocumentDao.findAllOrdered(order);
    }

    /**
     * Returns all {@link OtherDocumentRecord OtherDocumentRecords} stored in the repository which are of the
     * given {@link OtherDocumentRecordType type}. The {@link OtherDocumentRecord} are arranged according to
     * their {@link OtherDocumentRecord#getCreationTime() creationTimes} in the given {@link OrderType order}.
     */
    public List<OtherDocumentRecord> findAllOrdered(OtherDocumentRecordType type, OrderType order) {
        return this.otherDocumentDao.findAllOrdered(type, order);
    }

    /**
     * Updates the given {@link OtherDocumentRecord} in the repository. The old version of this document
     * record should be already stored there.
     */
    public void update(OtherDocumentRecord document) {
        this.otherDocumentDao.update(document);
    }

    /**
     * Stores the given {@link OtherDocumentRecord} to the repository. If there is already a document record
     * with the same {@link OtherDocumentRecord#getFileName() filename}, throws an exception.
     * 
     * @return The new ID of the given {@link OtherDocumentRecord} generated by the repository
     */
    public int save(OtherDocumentRecord document) {
        return this.otherDocumentDao.save(document);
    }
}
