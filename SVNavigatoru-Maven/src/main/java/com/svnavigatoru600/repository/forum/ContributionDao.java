package com.svnavigatoru600.repository.forum;

import java.util.List;

import com.svnavigatoru600.domain.forum.ForumContribution;
import com.svnavigatoru600.repository.forum.impl.ContributionField;
import com.svnavigatoru600.service.util.OrderType;

/**
 * @author <a href="mailto:skalicky.tomas@gmail.com">Tomas Skalicky</a>
 */
public interface ContributionDao {

    /**
     * Returns a {@link ForumContribution} stored in the repository which has the given ID.
     * <p>
     * The returned contribution has its {@link ForumContribution#getThread() thread} and {@link ForumContribution#getAuthor()
     * author} populated.
     */
    ForumContribution findById(int contributionId);

    /**
     * Returns all {@link ForumContribution Contributions} stored in the repository which belong to the specified
     * {@link com.svnavigatoru600.domain.forum.ForumThread thread}.
     * <p>
     * Returned contributions do NOT have their {@link ForumContribution#getThread() threads} and
     * {@link ForumContribution#getAuthor() authors} populated.
     *
     * @param threadId
     *            The ID of the thread
     */
    List<ForumContribution> findAll(int threadId);

    /**
     * Returns all {@link ForumContribution Contributions} stored in the repository arranged according to the given
     * {@link ContributionField sortField} and {@link OrderType sortDirection}.
     * <p>
     * It returns only the first <code>maxResultSize</code> {@link ForumContribution Contributions}.
     * <p>
     * Returned contributions have their {@link ForumContribution#getThread() threads} and {@link ForumContribution#getAuthor()
     * authors} populated.
     */
    List<ForumContribution> findAllOrdered(ContributionField sortField, OrderType sortDirection, int maxResultSize);

    /**
     * Returns all {@link ForumContribution Contributions} stored in the repository arranged according to the given
     * {@link ContributionField sortField} and {@link OrderType sortDirection}.
     * <p>
     * Moreover, the resulting {@link ForumContribution Contributions} are only those which belong to the specified
     * {@link com.svnavigatoru600.domain.forum.ForumThread Thread}.
     * <p>
     * Returned contributions have their {@link ForumContribution#getThread() threads} and {@link ForumContribution#getAuthor()
     * authors} populated.
     *
     * @param threadId
     *            The ID of the thread
     */
    List<ForumContribution> findAllOrdered(int threadId, ContributionField sortField, OrderType sortDirection);

    /**
     * Updates the given {@link ForumContribution} in the repository. The old version of this contribution should be already
     * stored there.
     * <p>
     * <b>Preconditions:</b> The new <code>contribution</code>'s {@link ForumContribution#getThread() thread} and
     * {@link ForumContribution#getAuthor() author} must have already been persisted in the repository.
     */
    void update(ForumContribution contribution);

    /**
     * Stores the given {@link ForumContribution} to the repository.
     * <p>
     * <b>Preconditions:</b> The new <code>contribution</code>'s {@link ForumContribution#getThread() thread} and
     * {@link ForumContribution#getAuthor() author} must have already been persisted in the repository.
     *
     * @return The new ID of the given {@link ForumContribution} generated by the repository
     */
    int save(ForumContribution contribution);

    /**
     * Deletes the given {@link ForumContribution} from the repository.
     */
    void delete(ForumContribution contribution);
}
