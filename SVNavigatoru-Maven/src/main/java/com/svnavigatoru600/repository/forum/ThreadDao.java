package com.svnavigatoru600.repository.forum;

import java.util.List;

import com.svnavigatoru600.domain.forum.Thread;

/**
 * @author <a href="mailto:skalicky.tomas@gmail.com">Tomas Skalicky</a>
 */
public interface ThreadDao {

    /**
     * Returns a {@link Thread} stored in the repository which has the given ID.
     * <p>
     * The returned thread has its {@link Thread#getAuthor() author} and {@link Thread#getContributions() contributions}
     * populated.
     */
    Thread findById(int threadId);

    /**
     * Returns all {@link Thread Threads} stored in the repository.
     * <p>
     * Returned threads have their {@link Thread#getAuthor() authors} and {@link Thread#getContributions()
     * contributions} populated.
     */
    List<Thread> loadAll();

    /**
     * Updates the given {@link Thread} in the repository. The old version of this thread should be already stored
     * there.
     * <p>
     * Does NOT persist changes of <code>thread</code>'s {@link Thread#getContributions() contributions}.
     * <p>
     * <b>Preconditions:</b> The new <code>thread</code>'s {@link Thread#getAuthor() author} must have already been
     * persisted in the repository.
     */
    void update(Thread thread);

    /**
     * Stores the given {@link Thread} to the repository.
     * <p>
     * Does persist <code>thread</code>'s {@link Thread#getContributions() contributions} as new records in the
     * repository.
     * <p>
     * <b>Preconditions:</b> The new <code>thread</code>'s {@link Thread#getAuthor() author} must have already been
     * persisted in the repository.
     * 
     * @return The new ID of the given {@link Thread} generated by the repository
     */
    int save(Thread thread);

    /**
     * Deletes the given {@link Thread} from the repository.
     * <p>
     * Deletes records of <code>thread</code>'s {@link Thread#getContributions() contributions} from the repository as
     * well.
     */
    void delete(Thread thread);
}
