-- -----------------
-- Users and Authorities (= Roles)
-- Do not change username, password, enabled and authority since they are the parts
-- of the Spring Security's default database schema.
--
-- The email is UNIQUE; hence it is necessary to use "null" as the default value, not
-- the empty string.
-- 
-- The default value of is_test_user is "false".
-- The default values of all notifications' flags are "true".
--
CREATE TABLE users (
	username VARCHAR(50) PRIMARY KEY,
	password VARCHAR(50) NOT NULL,
	enabled BOOLEAN NOT NULL,
	first_name VARCHAR(20) NOT NULL,
	last_name VARCHAR(20) NOT NULL,
	email VARCHAR(100) UNIQUE,
	phone VARCHAR(20),
	is_test_user BOOLEAN DEFAULT 0 NOT NULL,
	news_notifications BOOLEAN DEFAULT 1 NOT NULL,
	event_notifications BOOLEAN DEFAULT 1 NOT NULL,
	forum_notifications BOOLEAN DEFAULT 1 NOT NULL,
	other_document_notifications BOOLEAN DEFAULT 1 NOT NULL,
	other_section_notifications BOOLEAN DEFAULT 1 NOT NULL,
	smtp_port INT(11) DEFAULT 2525 NOT NULL,
	CONSTRAINT email_validator CHECK (email LIKE '_%@_%._%')
);

CREATE TABLE authorities (
	username VARCHAR(50) NOT NULL,
	authority VARCHAR(50) NOT NULL,
	PRIMARY KEY (username, authority),
	CONSTRAINT FK_authorities_users
		FOREIGN KEY (username)
		REFERENCES users(username)
		ON DELETE CASCADE
);


	
-- -----------------
-- Sections which are edited via WYSIWYG editor.
--
CREATE TABLE wysiwyg_sections (
	name VARCHAR(50) PRIMARY KEY,
	last_save_time DATETIME NOT NULL,
	source_code CLOB(16M)
);



-- -----------------
-- Documents
--
CREATE TABLE document_records (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY,
	file_name VARCHAR(100) NOT NULL,
	/* BLOB cannot be used since it allows to store at most 16KB. MEDIUMBLOB is up to 64MB. */
	file BLOB(16M)
);

CREATE TABLE session_records (
	id INTEGER PRIMARY KEY,
	type VARCHAR(50) NOT NULL,
	session_date DATETIME NOT NULL,
	discussed_topics CLOB(65K) NOT NULL,
	CONSTRAINT FK_session_records_document_records
		FOREIGN KEY (id)
		REFERENCES document_records(id)
		ON DELETE CASCADE
);

CREATE TABLE other_document_records (
	id INTEGER PRIMARY KEY,
	name VARCHAR(100) NOT NULL,
	description CLOB(65K),
	creation_time DATETIME NOT NULL,
	last_save_time DATETIME NOT NULL,
	CONSTRAINT FK_other_document_records_document_records
		FOREIGN KEY (id)
		REFERENCES document_records(id)
		ON DELETE CASCADE
);

CREATE TABLE other_document_record_type_relations (
	record_id INTEGER NOT NULL,
	type VARCHAR(50) NOT NULL,
	PRIMARY KEY (record_id, type),
	CONSTRAINT FK_relations_other_document_records
		FOREIGN KEY (record_id)
		REFERENCES other_document_records(id)
		ON DELETE CASCADE
);



-- -----------------
-- Forum
--
CREATE TABLE threads (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY,
	name VARCHAR(255) NOT NULL,
	creation_time DATETIME not null,
	author_username VARCHAR(50),
	CONSTRAINT FK_threads_users
		FOREIGN KEY (author_username)
		REFERENCES users(username)
		ON DELETE SET NULL
);

CREATE TABLE contributions (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY,
	thread_id INTEGER NOT NULL,
	text CLOB(65K),
	creation_time DATETIME NOT NULL,
	last_save_time DATETIME NOT NULL,
	author_username VARCHAR(50),
	CONSTRAINT FK_contributions_threads
		FOREIGN KEY (thread_id)
		REFERENCES threads(id)
		ON DELETE CASCADE,
	CONSTRAINT FK_contributions_users
		FOREIGN KEY (author_username)
		REFERENCES users(username)
		ON DELETE SET NULL
);



-- -----------------
-- Events
--
CREATE TABLE calendar_events (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY,
	name VARCHAR(100) NOT NULL,
	date DATETIME NOT NULL,
	description CLOB(65K),
	priority VARCHAR(10) NOT NULL
);



-- -----------------
-- News
--
CREATE TABLE news (
	id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY,
	title VARCHAR(200) NOT NULL,
	text CLOB(65K),
	creation_time DATETIME NOT NULL,
	last_save_time DATETIME NOT NULL
);
